// --------------------------------------------------------------------------------------------------------------------
// <copyright file="RepresentationDummyFactory.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Representation.System.Test source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Representation.System.Test
{
    using System;

    using FakeItEasy;

    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Linq.Expressions;

    using OBeautifulCode.AutoFakeItEasy;
    using OBeautifulCode.Math.Recipes;
    using OBeautifulCode.Reflection.Recipes;
    using OBeautifulCode.Type.Recipes;

    /// <summary>
    /// A Dummy Factory for types in <see cref="OBeautifulCode.Representation.System"/>.
    /// </summary>
 #if !OBeautifulCodeRepresentationRecipesProject
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Representation.System.Test", "See package version number")]
#endif
    public class RepresentationDummyFactory : DefaultRepresentationDummyFactory
    {
        private static readonly IReadOnlyList<Type> AppDomainClosedTypes = AssemblyLoader
            .GetLoadedAssemblies()
            .GetTypesFromAssemblies()
            .Where(_ => !_.ContainsGenericParameters)
            .Where(_ => !_.IsClosedAnonymousType())
            .ToList();

        public RepresentationDummyFactory()
        {
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var index = ThreadSafeRandom.Next(0, AppDomainClosedTypes.Count);

                    var result = AppDomainClosedTypes[index];

                    return result.ToRepresentation();
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => (ExpressionRepresentationBase)new ConstantExpressionRepresentation<string>(
                    A.Dummy<TypeRepresentation>(),
                    A.Dummy<ExpressionType>(),
                    A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ConstantExpressionRepresentation<string>(
                    A.Dummy<TypeRepresentation>(),
                    A.Dummy<ExpressionType>(),
                    A.Dummy<string>()));
        }
    }
}
